{"ast":null,"code":"var _jsxFileName = \"F:\\\\ibs-admin-front\\\\ibs-school-admin\\\\src\\\\pages\\\\PersonalCabinet\\\\index.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Age, Amount, Avatar, ClosePopUp, ContactBox, Country, FullName, Information, InformationBox, InformationTitle, MainData, MainDataBox, PaidFor, PaymentDate, PaymentForm, PaymentTableBox, PersonalCabinetWrapper, Status, TableRow, Type } from \"./styles\";\nimport Male from \"../../assets/icons/boy.svg\";\nimport Female from \"../../assets/icons/girl.svg\";\nimport { paymentTypeIcon } from \"../../util/paymentType\";\nimport CourseDurationCard from \"../../components/CourseDurationCard\";\nimport { Button, Form, Label, PhoneNumberFormat, Radio, RadioBox, RadioWrapper, Title } from \"../../components/Input/styles\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getClientIdData } from \"../../redux/modules/clientIdData/clientIdDataAction\";\nimport { whichMonth } from \"../../util/whichMonth\"; //icons\n\nimport { ReactComponent as CloseIcon } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/icons/plus.svg\"; // import {ReactComponent as Payme} from \"../../assets/icons/payme.svg\"\n// import {ReactComponent as Cash} from \"../../assets/icons/cash.svg\"\n// import {ReactComponent as Card} from \"../../assets/icons/card.svg\"\n\nimport email from \"../../assets/icons/email.png\";\nimport smartPhone from \"../../assets/icons/smartphone.png\";\nimport telegram from \"../../assets/icons/telegram.png\";\nimport axios from \"axios\";\nimport { link } from \"../../baseLink/link\";\nimport { ButtonBox } from \"../../components/Input\";\nimport { useParams } from \"react-router-dom\";\nimport { httpRequest } from \"../../util/httpRequest\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst PersonalCabinet = () => {\n  _s();\n\n  var _clientData$birthDate, _clientData$paymentLi, _clientData$address, _clientData$address2, _clientData$address3, _clientData$address4, _clientData$contact, _clientData$contact2, _clientData$contact3;\n\n  // const courses = [\n  //     {\n  //         name: \"programming | frontend\",\n  //         format: \"offline\",\n  //         process: \"stopped\",\n  //         month: [\n  //             {\n  //                 active: true,\n  //                 day: \"9 Jan\"\n  //             }, {\n  //                 active: true,\n  //                 day: \"7 Fab\"\n  //             }, {\n  //                 active: false,\n  //                 day: \"9 Mar\"\n  //             }, {\n  //                 active: false,\n  //                 day: \"8 Apr\"\n  //             }, {\n  //                 active: false,\n  //                 day: \"6 May\"\n  //             }, {\n  //                 active: false,\n  //                 day: \"3 Jun\"\n  //             }\n  //         ]\n  //     },\n  //     {\n  //         name: \"language | English\",\n  //         format: \"online\",\n  //         process: \"graduated\",\n  //         month: [\n  //             {\n  //                 active: true,\n  //                 day: \"9 Jan\"\n  //             }, {\n  //                 active: true,\n  //                 day: \"7 Fab\"\n  //             }, {\n  //                 active: false,\n  //                 day: \"9 Mar\"\n  //             }, {\n  //                 active: false,\n  //                 day: \"8 Apr\"\n  //             }, {\n  //                 active: false,\n  //                 day: \"6 May\"\n  //             }, {\n  //                 active: false,\n  //                 day: \"3 Jun\"\n  //             }\n  //         ]\n  //     },\n  //     {\n  //         name: \"language | English\",\n  //         format: \"online\",\n  //         process: \"learning\",\n  //         month: [\n  //             {\n  //                 active: true,\n  //                 day: \"29 Jan\"\n  //             }, {\n  //                 active: true,\n  //                 day: \"27 Fab\"\n  //             }, {\n  //                 active: false,\n  //                 day: \"29 Mar\"\n  //             }, {\n  //                 active: false,\n  //                 day: \"28 Apr\"\n  //             }, {\n  //                 active: false,\n  //                 day: \"26 May\"\n  //             }, {\n  //                 active: false,\n  //                 day: \"23 Jun\"\n  //             }, {\n  //                 active: false,\n  //                 day: \"29 Mar\"\n  //             }, {\n  //                 active: false,\n  //                 day: \"28 Apr\"\n  //             }, {\n  //                 active: false,\n  //                 day: \"26 May\"\n  //             }, {\n  //                 active: false,\n  //                 day: \"23 Jun\"\n  //             }\n  //         ]\n  //     }, {\n  //         name: \"language | English\",\n  //         format: \"online\",\n  //         process: \"learning\",\n  //         month: [\n  //             {\n  //                 active: true,\n  //                 day: \"26 May\"\n  //             }, {\n  //                 active: false,\n  //                 day: \"23 Jun\"\n  //             }\n  //         ]\n  //     }\n  // ]\n  //\n  // const payments = [\n  //     {\n  //         amount: \"790 000\",\n  //         paidFor: \"Frontend\",\n  //         date: \"9 Fab\",\n  //         type: \"cash\",\n  //     }, {\n  //         amount: \"190 000\",\n  //         paidFor: \"English\",\n  //         date: \"29 Fab\",\n  //         type: \"payme\",\n  //     }, {\n  //         amount: \"270 000\",\n  //         paidFor: \"Arabic\",\n  //         date: \"19 Fab\",\n  //         type: \"card\",\n  //     }, {\n  //         amount: \"100 000\",\n  //         paidFor: \"Frontend\",\n  //         date: \"19 Mar\",\n  //         type: \"cash\",\n  //     },\n  // ]\n  const [paymentPopUp, setPaymentPopUp] = useState({\n    popUp: false,\n    data: {}\n  }); // const clientId = useSelector(state => state.clientIdReducer);\n\n  const clientsData = useSelector(state => state.clientIdDataReducer);\n  const dispatch = useDispatch();\n  const {\n    loading,\n    error,\n    clientData\n  } = clientsData;\n  const [typeOfPayment, setTypeOfPayment] = useState([]);\n\n  const getPaymentTypes = () => {\n    axios(httpRequest(\"type-of-payment\", \"GET\")) // .get(`${link}/type-of-payment`)\n    .then(res => {\n      setTypeOfPayment(res.data);\n    });\n  };\n\n  const {\n    id\n  } = useParams();\n  useEffect(() => {\n    dispatch(getClientIdData(id));\n    getPaymentTypes();\n  }, []);\n  const birthData = clientData === null || clientData === void 0 ? void 0 : (_clientData$birthDate = clientData.birthDate) === null || _clientData$birthDate === void 0 ? void 0 : _clientData$birthDate.split(\"-\");\n  const day = birthData !== undefined && birthData[2];\n  const month = birthData !== undefined && whichMonth(birthData[1]);\n  const year = birthData !== undefined && birthData[0];\n  const dob = Math.abs(new Date(Date.now() - new Date(clientData === null || clientData === void 0 ? void 0 : clientData.birthDate).getTime()).getUTCFullYear() - 1970); // console.log(birthData)\n\n  const [submissionProcess, setSubmissionProcess] = useState({\n    loading: false,\n    error: false,\n    success: false\n  });\n\n  const submitPayment = e => {\n    var _paymentPopUp$data, _paymentPopUp$data2;\n\n    e.preventDefault();\n    setSubmissionProcess({\n      loading: true,\n      error: false,\n      success: false\n    });\n    const {\n      amount,\n      paymentType\n    } = e.target; // console.log(paymentType.value, paymentPopUp.data?.days,paymentPopUp.data?.scheduledCourse.id)\n\n    const form = {\n      amount: parseInt(amount.value.split(\",\").join(\"\")),\n      payer: {\n        id: clientData.id\n      },\n      scheduledCourse: {\n        id: (_paymentPopUp$data = paymentPopUp.data) === null || _paymentPopUp$data === void 0 ? void 0 : _paymentPopUp$data.scheduledCourse.id\n      },\n      coursePaymentDay: (_paymentPopUp$data2 = paymentPopUp.data) === null || _paymentPopUp$data2 === void 0 ? void 0 : _paymentPopUp$data2.days,\n      paymentType: {\n        id: parseInt(paymentType.value)\n      }\n    };\n    console.log(form);\n    axios(httpRequest(\"payment-list\", \"POST\", form)) // .post(`${link}/payment-list`, form)\n    .then(res => {\n      setSubmissionProcess({\n        loading: false,\n        error: false,\n        success: true\n      });\n      setTimeout(() => setPaymentPopUp({\n        popUp: false,\n        data: {}\n      }), 4000);\n      dispatch(getClientIdData(id));\n    }).catch(err => {\n      setSubmissionProcess({\n        loading: false,\n        error: true,\n        success: false\n      });\n    }).finally(() => {\n      setTimeout(() => setSubmissionProcess({\n        loading: false,\n        error: false,\n        success: false\n      }), 3000);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(PersonalCabinetWrapper, {\n      children: [/*#__PURE__*/_jsxDEV(InformationBox, {\n        children: [/*#__PURE__*/_jsxDEV(Information, {\n          children: [/*#__PURE__*/_jsxDEV(InformationTitle, {\n            children: \"Course\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 267,\n            columnNumber: 25\n          }, this), (clientData === null || clientData === void 0 ? void 0 : clientData.clientCourse) !== undefined && (clientData === null || clientData === void 0 ? void 0 : clientData.clientCourse.map(({\n            scheduledCourse\n          }) => /*#__PURE__*/_jsxDEV(CourseDurationCard, {\n            setPaymentPopUp: setPaymentPopUp,\n            scheduledCourse: scheduledCourse,\n            payments: clientData === null || clientData === void 0 ? void 0 : clientData.paymentList,\n            process: \"learning\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 278,\n            columnNumber: 29\n          }, this)))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Information, {\n          children: [/*#__PURE__*/_jsxDEV(InformationTitle, {\n            children: \"Payment\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 285,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(PaymentTableBox, {\n            children: clientData === null || clientData === void 0 ? void 0 : (_clientData$paymentLi = clientData.paymentList) === null || _clientData$paymentLi === void 0 ? void 0 : _clientData$paymentLi.map(({\n              amount,\n              paymentDate,\n              scheduledCourse,\n              paymentType\n            }) => /*#__PURE__*/_jsxDEV(TableRow, {\n              children: [/*#__PURE__*/_jsxDEV(Amount, {\n                children: `${amount} UZS`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 290,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(PaidFor, {\n                children: scheduledCourse.courseName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 293,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(PaymentDate, {\n                children: paymentDate\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 296,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(Type, {\n                title: paymentType.paymentType,\n                children: paymentTypeIcon(paymentType.paymentType)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 299,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 289,\n              columnNumber: 33\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 287,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(MainDataBox, {\n        children: [/*#__PURE__*/_jsxDEV(MainData, {\n          children: [/*#__PURE__*/_jsxDEV(Avatar, {\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: clientData.gender === \"male\" ? Male : clientData.gender === \"female\" ? Female : \"\",\n              alt: \"avatar\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 311,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Status, {\n              active: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 314,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 310,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(FullName, {\n            children: [clientData === null || clientData === void 0 ? void 0 : clientData.firstName, \" \", clientData === null || clientData === void 0 ? void 0 : clientData.lastName]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 316,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Age, {\n            children: [day, \" \", month, \" \", year]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 319,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Age, {\n            children: [dob, \" years old\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 320,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Country, {\n            children: [clientData === null || clientData === void 0 ? void 0 : (_clientData$address = clientData.address) === null || _clientData$address === void 0 ? void 0 : _clientData$address.region, \"/\", clientData === null || clientData === void 0 ? void 0 : (_clientData$address2 = clientData.address) === null || _clientData$address2 === void 0 ? void 0 : _clientData$address2.city]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 321,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Country, {\n            children: [clientData === null || clientData === void 0 ? void 0 : (_clientData$address3 = clientData.address) === null || _clientData$address3 === void 0 ? void 0 : _clientData$address3.streetName, \" \", clientData === null || clientData === void 0 ? void 0 : (_clientData$address4 = clientData.address) === null || _clientData$address4 === void 0 ? void 0 : _clientData$address4.homeNumber]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 322,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(MainData, {\n          children: [/*#__PURE__*/_jsxDEV(ContactBox, {\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: smartPhone,\n              alt: \"smartPhone\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 326,\n              columnNumber: 29\n            }, this), clientData === null || clientData === void 0 ? void 0 : (_clientData$contact = clientData.contact) === null || _clientData$contact === void 0 ? void 0 : _clientData$contact.phoneNumber]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 325,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(ContactBox, {\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: email,\n              alt: \"email\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 329,\n              columnNumber: 29\n            }, this), clientData === null || clientData === void 0 ? void 0 : (_clientData$contact2 = clientData.contact) === null || _clientData$contact2 === void 0 ? void 0 : _clientData$contact2.email]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 328,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(ContactBox, {\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: telegram,\n              alt: \"telegram\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 332,\n              columnNumber: 29\n            }, this), clientData === null || clientData === void 0 ? void 0 : (_clientData$contact3 = clientData.contact) === null || _clientData$contact3 === void 0 ? void 0 : _clientData$contact3.telegram]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 331,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 324,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 17\n      }, this), paymentPopUp.popUp && /*#__PURE__*/_jsxDEV(PaymentForm, {\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          onSubmit: submitPayment,\n          children: [/*#__PURE__*/_jsxDEV(Title, {\n            children: \"Payment\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 339,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(PhoneNumberFormat, {\n            thousandSeparator: true,\n            name: \"amount\",\n            placeholder: \"Amount of money\",\n            style: {\n              textAlign: \"right\"\n            },\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 340,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(RadioWrapper, {\n            width: \"100%\",\n            children: typeOfPayment === null || typeOfPayment === void 0 ? void 0 : typeOfPayment.map(({\n              id,\n              paymentType\n            }) => /*#__PURE__*/_jsxDEV(RadioBox, {\n              width: `${100 / typeOfPayment.length}%`,\n              children: [/*#__PURE__*/_jsxDEV(Radio, {\n                name: \"paymentType\",\n                value: id,\n                id: `paymentType${paymentType}`,\n                type: \"radio\",\n                required: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 345,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(Label, {\n                htmlFor: `paymentType${paymentType}`,\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: paymentTypeIcon(paymentType)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 349,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 348,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 344,\n              columnNumber: 33\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 342,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(ButtonBox, {\n            loading: submissionProcess.loading,\n            error: submissionProcess.error,\n            success: submissionProcess.success\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 354,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(ClosePopUp, {\n            onClick: () => setPaymentPopUp({\n              popUp: false,\n              data: {}\n            }),\n            children: /*#__PURE__*/_jsxDEV(CloseIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 359,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 358,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(PersonalCabinet, \"0vn0T5ayY5GV+JTdyHWffO/ZQaA=\", false, function () {\n  return [useSelector, useDispatch, useParams];\n});\n\n_c = PersonalCabinet;\nexport default PersonalCabinet;\n\nvar _c;\n\n$RefreshReg$(_c, \"PersonalCabinet\");","map":{"version":3,"sources":["F:/ibs-admin-front/ibs-school-admin/src/pages/PersonalCabinet/index.jsx"],"names":["React","useEffect","useState","Age","Amount","Avatar","ClosePopUp","ContactBox","Country","FullName","Information","InformationBox","InformationTitle","MainData","MainDataBox","PaidFor","PaymentDate","PaymentForm","PaymentTableBox","PersonalCabinetWrapper","Status","TableRow","Type","paymentTypeIcon","CourseDurationCard","Button","Form","Label","PhoneNumberFormat","Radio","RadioBox","RadioWrapper","Title","useDispatch","useSelector","getClientIdData","whichMonth","email","smartPhone","telegram","axios","link","ButtonBox","useParams","httpRequest","PersonalCabinet","paymentPopUp","setPaymentPopUp","popUp","data","clientsData","state","clientIdDataReducer","dispatch","loading","error","clientData","typeOfPayment","setTypeOfPayment","getPaymentTypes","then","res","id","birthData","birthDate","split","day","undefined","month","year","dob","Math","abs","Date","now","getTime","getUTCFullYear","submissionProcess","setSubmissionProcess","success","submitPayment","e","preventDefault","amount","paymentType","target","form","parseInt","value","join","payer","scheduledCourse","coursePaymentDay","days","console","log","setTimeout","catch","err","finally","clientCourse","map","paymentList","paymentDate","courseName","gender","Male","Female","firstName","lastName","address","region","city","streetName","homeNumber","contact","phoneNumber","textAlign","length"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport {\r\n    Age,\r\n    Amount,\r\n    Avatar,\r\n    ClosePopUp,\r\n    ContactBox,\r\n    Country,\r\n    FullName,\r\n    Information,\r\n    InformationBox,\r\n    InformationTitle,\r\n    MainData,\r\n    MainDataBox,\r\n    PaidFor,\r\n    PaymentDate,\r\n    PaymentForm,\r\n    PaymentTableBox,\r\n    PersonalCabinetWrapper,\r\n    Status,\r\n    TableRow,\r\n    Type\r\n} from \"./styles\";\r\nimport Male from \"../../assets/icons/boy.svg\"\r\nimport Female from \"../../assets/icons/girl.svg\"\r\nimport {paymentTypeIcon} from \"../../util/paymentType\"\r\nimport CourseDurationCard from \"../../components/CourseDurationCard\";\r\nimport {\r\n    Button,\r\n    Form,\r\n    Label,\r\n    PhoneNumberFormat,\r\n    Radio,\r\n    RadioBox,\r\n    RadioWrapper,\r\n    Title\r\n} from \"../../components/Input/styles\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getClientIdData} from \"../../redux/modules/clientIdData/clientIdDataAction\";\r\nimport {whichMonth} from \"../../util/whichMonth\";\r\n\r\n//icons\r\nimport {ReactComponent as CloseIcon} from \"../../assets/icons/plus.svg\"\r\n// import {ReactComponent as Payme} from \"../../assets/icons/payme.svg\"\r\n// import {ReactComponent as Cash} from \"../../assets/icons/cash.svg\"\r\n// import {ReactComponent as Card} from \"../../assets/icons/card.svg\"\r\nimport email from \"../../assets/icons/email.png\"\r\nimport smartPhone from \"../../assets/icons/smartphone.png\"\r\nimport telegram from \"../../assets/icons/telegram.png\"\r\nimport axios from \"axios\";\r\nimport {link} from \"../../baseLink/link\";\r\nimport {ButtonBox} from \"../../components/Input\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport {httpRequest} from \"../../util/httpRequest\";\r\n\r\nconst PersonalCabinet = () => {\r\n\r\n    // const courses = [\r\n    //     {\r\n    //         name: \"programming | frontend\",\r\n    //         format: \"offline\",\r\n    //         process: \"stopped\",\r\n    //         month: [\r\n    //             {\r\n    //                 active: true,\r\n    //                 day: \"9 Jan\"\r\n    //             }, {\r\n    //                 active: true,\r\n    //                 day: \"7 Fab\"\r\n    //             }, {\r\n    //                 active: false,\r\n    //                 day: \"9 Mar\"\r\n    //             }, {\r\n    //                 active: false,\r\n    //                 day: \"8 Apr\"\r\n    //             }, {\r\n    //                 active: false,\r\n    //                 day: \"6 May\"\r\n    //             }, {\r\n    //                 active: false,\r\n    //                 day: \"3 Jun\"\r\n    //             }\r\n    //         ]\r\n    //     },\r\n    //     {\r\n    //         name: \"language | English\",\r\n    //         format: \"online\",\r\n    //         process: \"graduated\",\r\n    //         month: [\r\n    //             {\r\n    //                 active: true,\r\n    //                 day: \"9 Jan\"\r\n    //             }, {\r\n    //                 active: true,\r\n    //                 day: \"7 Fab\"\r\n    //             }, {\r\n    //                 active: false,\r\n    //                 day: \"9 Mar\"\r\n    //             }, {\r\n    //                 active: false,\r\n    //                 day: \"8 Apr\"\r\n    //             }, {\r\n    //                 active: false,\r\n    //                 day: \"6 May\"\r\n    //             }, {\r\n    //                 active: false,\r\n    //                 day: \"3 Jun\"\r\n    //             }\r\n    //         ]\r\n    //     },\r\n    //     {\r\n    //         name: \"language | English\",\r\n    //         format: \"online\",\r\n    //         process: \"learning\",\r\n    //         month: [\r\n    //             {\r\n    //                 active: true,\r\n    //                 day: \"29 Jan\"\r\n    //             }, {\r\n    //                 active: true,\r\n    //                 day: \"27 Fab\"\r\n    //             }, {\r\n    //                 active: false,\r\n    //                 day: \"29 Mar\"\r\n    //             }, {\r\n    //                 active: false,\r\n    //                 day: \"28 Apr\"\r\n    //             }, {\r\n    //                 active: false,\r\n    //                 day: \"26 May\"\r\n    //             }, {\r\n    //                 active: false,\r\n    //                 day: \"23 Jun\"\r\n    //             }, {\r\n    //                 active: false,\r\n    //                 day: \"29 Mar\"\r\n    //             }, {\r\n    //                 active: false,\r\n    //                 day: \"28 Apr\"\r\n    //             }, {\r\n    //                 active: false,\r\n    //                 day: \"26 May\"\r\n    //             }, {\r\n    //                 active: false,\r\n    //                 day: \"23 Jun\"\r\n    //             }\r\n    //         ]\r\n    //     }, {\r\n    //         name: \"language | English\",\r\n    //         format: \"online\",\r\n    //         process: \"learning\",\r\n    //         month: [\r\n    //             {\r\n    //                 active: true,\r\n    //                 day: \"26 May\"\r\n    //             }, {\r\n    //                 active: false,\r\n    //                 day: \"23 Jun\"\r\n    //             }\r\n    //         ]\r\n    //     }\r\n    // ]\r\n    //\r\n    // const payments = [\r\n    //     {\r\n    //         amount: \"790 000\",\r\n    //         paidFor: \"Frontend\",\r\n    //         date: \"9 Fab\",\r\n    //         type: \"cash\",\r\n    //     }, {\r\n    //         amount: \"190 000\",\r\n    //         paidFor: \"English\",\r\n    //         date: \"29 Fab\",\r\n    //         type: \"payme\",\r\n    //     }, {\r\n    //         amount: \"270 000\",\r\n    //         paidFor: \"Arabic\",\r\n    //         date: \"19 Fab\",\r\n    //         type: \"card\",\r\n    //     }, {\r\n    //         amount: \"100 000\",\r\n    //         paidFor: \"Frontend\",\r\n    //         date: \"19 Mar\",\r\n    //         type: \"cash\",\r\n    //     },\r\n    // ]\r\n\r\n    const [paymentPopUp, setPaymentPopUp] = useState({popUp: false, data: {}})\r\n    // const clientId = useSelector(state => state.clientIdReducer);\r\n    const clientsData = useSelector(state => state.clientIdDataReducer)\r\n    const dispatch = useDispatch()\r\n\r\n    const {loading, error, clientData} = clientsData\r\n\r\n    const [typeOfPayment, setTypeOfPayment] = useState([])\r\n    const getPaymentTypes = () => {\r\n        axios(httpRequest(\"type-of-payment\", \"GET\"))\r\n            // .get(`${link}/type-of-payment`)\r\n            .then(res => {\r\n                setTypeOfPayment(res.data)\r\n            })\r\n    }\r\n\r\n    const {id} = useParams()\r\n\r\n    useEffect(() => {\r\n        dispatch(getClientIdData(id))\r\n        getPaymentTypes()\r\n    }, [])\r\n\r\n    const birthData = clientData?.birthDate?.split(\"-\")\r\n    const day = birthData !== undefined && birthData[2];\r\n    const month = birthData !== undefined && whichMonth(birthData[1])\r\n    const year = birthData !== undefined && birthData[0]\r\n\r\n    const dob = Math.abs(new Date(Date.now() - new Date(clientData?.birthDate).getTime()).getUTCFullYear() - 1970)\r\n    // console.log(birthData)\r\n\r\n    const [submissionProcess, setSubmissionProcess] = useState({loading: false, error: false, success: false})\r\n    const submitPayment = (e) => {\r\n        e.preventDefault();\r\n        setSubmissionProcess({loading: true, error: false, success: false})\r\n        const {\r\n            amount,\r\n            paymentType\r\n        } = e.target\r\n\r\n        // console.log(paymentType.value, paymentPopUp.data?.days,paymentPopUp.data?.scheduledCourse.id)\r\n\r\n        const form = {\r\n            amount: parseInt(amount.value.split(\",\").join(\"\")),\r\n            payer: {\r\n                id: clientData.id\r\n            },\r\n            scheduledCourse: {\r\n                id: paymentPopUp.data?.scheduledCourse.id\r\n            },\r\n            coursePaymentDay: paymentPopUp.data?.days,\r\n            paymentType: {\r\n                id: parseInt(paymentType.value)\r\n            },\r\n        }\r\n        console.log(form)\r\n\r\n        axios(httpRequest(\"payment-list\", \"POST\", form))\r\n            // .post(`${link}/payment-list`, form)\r\n            .then(res => {\r\n                setSubmissionProcess({loading: false, error: false, success: true})\r\n                setTimeout(() => setPaymentPopUp({popUp: false, data: {}}), 4000)\r\n                dispatch(getClientIdData(id))\r\n            })\r\n            .catch(err => {\r\n                setSubmissionProcess({loading: false, error: true, success: false})\r\n            })\r\n            .finally(() => {\r\n                setTimeout(() => setSubmissionProcess({loading: false, error: false, success: false}), 3000)\r\n            })\r\n\r\n\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <PersonalCabinetWrapper>\r\n                <InformationBox>\r\n                    <Information>\r\n                        <InformationTitle>Course</InformationTitle>\r\n                        {/*{clientData?.clientCourse !== undefined && clientData?.clientCourse.length}*/}\r\n                        {/*{clientsData?.clientCourse?.map(({name, format, process, month}) =>*/}\r\n                        {/*    <CourseDurationCard setPaymentPopUp={setPaymentPopUp} name={name} format={format}*/}\r\n                        {/*                        process={process} month={month}/>*/}\r\n                        {/*)}*/}\r\n                        {/*{courses.map(({name, format, process, month}) =>*/}\r\n                        {/*    <CourseDurationCard setPaymentPopUp={setPaymentPopUp} name={name} format={format}*/}\r\n                        {/*                        process={process} month={month}/>*/}\r\n                        {/*)}*/}\r\n                        {clientData?.clientCourse !== undefined && clientData?.clientCourse.map(({scheduledCourse}) =>\r\n                            <CourseDurationCard setPaymentPopUp={setPaymentPopUp}\r\n                                                scheduledCourse={scheduledCourse}\r\n                                                payments={clientData?.paymentList}\r\n                                                process={\"learning\"}/>\r\n                        )}\r\n                    </Information>\r\n                    <Information>\r\n                        <InformationTitle>Payment</InformationTitle>\r\n\r\n                        <PaymentTableBox>\r\n                            {clientData?.paymentList?.map(({amount, paymentDate, scheduledCourse, paymentType}) =>\r\n                                <TableRow>\r\n                                    <Amount>\r\n                                        {`${amount} UZS`}\r\n                                    </Amount>\r\n                                    <PaidFor>\r\n                                        {scheduledCourse.courseName}\r\n                                    </PaidFor>\r\n                                    <PaymentDate>\r\n                                        {paymentDate}\r\n                                    </PaymentDate>\r\n                                    <Type title={paymentType.paymentType}>\r\n                                        {paymentTypeIcon(paymentType.paymentType)}\r\n                                        {/*<Cash/>*/}\r\n                                    </Type>\r\n                                </TableRow>\r\n                            )}\r\n                        </PaymentTableBox>\r\n                    </Information>\r\n                </InformationBox>\r\n                <MainDataBox>\r\n                    <MainData>\r\n                        <Avatar>\r\n                            <img\r\n                                src={clientData.gender === \"male\" ? Male : clientData.gender === \"female\" ? Female : \"\"}\r\n                                alt=\"avatar\"/>\r\n                            <Status active/>\r\n                        </Avatar>\r\n                        <FullName>\r\n                            {clientData?.firstName} {clientData?.lastName}\r\n                        </FullName>\r\n                        <Age>{day} {month} {year}</Age>\r\n                        <Age>{dob} years old</Age>\r\n                        <Country>{clientData?.address?.region}/{clientData?.address?.city}</Country>\r\n                        <Country>{clientData?.address?.streetName} {clientData?.address?.homeNumber}</Country>\r\n                    </MainData>\r\n                    <MainData>\r\n                        <ContactBox>\r\n                            <img src={smartPhone} alt=\"smartPhone\"/>{clientData?.contact?.phoneNumber}\r\n                        </ContactBox>\r\n                        <ContactBox>\r\n                            <img src={email} alt=\"email\"/>{clientData?.contact?.email}\r\n                        </ContactBox>\r\n                        <ContactBox>\r\n                            <img src={telegram} alt=\"telegram\"/>{clientData?.contact?.telegram}\r\n                        </ContactBox>\r\n                    </MainData>\r\n                </MainDataBox>\r\n                {paymentPopUp.popUp &&\r\n                <PaymentForm>\r\n                    <Form onSubmit={submitPayment}>\r\n                        <Title>Payment</Title>\r\n                        <PhoneNumberFormat thousandSeparator={true} name={\"amount\"} placeholder={\"Amount of money\"}\r\n                                           style={{textAlign: \"right\"}} required/>\r\n                        <RadioWrapper width={\"100%\"}>\r\n                            {typeOfPayment?.map(({id, paymentType}) =>\r\n                                <RadioBox width={`${100 / typeOfPayment.length}%`}>\r\n                                    <Radio name={\"paymentType\"} value={id} id={`paymentType${paymentType}`}\r\n                                           type={\"radio\"}\r\n                                           required/>\r\n                                    <Label htmlFor={`paymentType${paymentType}`}>\r\n                                        <div>{paymentTypeIcon(paymentType)}</div>\r\n                                    </Label>\r\n                                </RadioBox>\r\n                            )}\r\n                        </RadioWrapper>\r\n                        <ButtonBox loading={submissionProcess.loading}\r\n                                   error={submissionProcess.error}\r\n                                   success={submissionProcess.success}\r\n                        />\r\n                        <ClosePopUp onClick={() => setPaymentPopUp({popUp: false, data: {}})}>\r\n                            <CloseIcon/>\r\n                        </ClosePopUp>\r\n                    </Form>\r\n                </PaymentForm>\r\n                }\r\n            </PersonalCabinetWrapper>\r\n\r\n        </>\r\n    );\r\n}\r\n\r\nexport default PersonalCabinet;"]},"metadata":{},"sourceType":"module"}